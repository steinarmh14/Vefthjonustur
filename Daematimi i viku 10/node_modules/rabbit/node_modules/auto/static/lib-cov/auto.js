/* automatically generated by JSCoverage - do not edit */
if (typeof _$jscoverage === 'undefined') _$jscoverage = {};
if (! _$jscoverage['auto.js']) {
  _$jscoverage['auto.js'] = [];
  _$jscoverage['auto.js'][12] = 0;
  _$jscoverage['auto.js'][15] = 0;
  _$jscoverage['auto.js'][17] = 0;
  _$jscoverage['auto.js'][18] = 0;
  _$jscoverage['auto.js'][21] = 0;
  _$jscoverage['auto.js'][22] = 0;
  _$jscoverage['auto.js'][25] = 0;
  _$jscoverage['auto.js'][26] = 0;
  _$jscoverage['auto.js'][29] = 0;
  _$jscoverage['auto.js'][30] = 0;
  _$jscoverage['auto.js'][36] = 0;
  _$jscoverage['auto.js'][39] = 0;
  _$jscoverage['auto.js'][40] = 0;
  _$jscoverage['auto.js'][41] = 0;
  _$jscoverage['auto.js'][42] = 0;
  _$jscoverage['auto.js'][43] = 0;
  _$jscoverage['auto.js'][44] = 0;
  _$jscoverage['auto.js'][45] = 0;
  _$jscoverage['auto.js'][46] = 0;
  _$jscoverage['auto.js'][47] = 0;
  _$jscoverage['auto.js'][50] = 0;
  _$jscoverage['auto.js'][53] = 0;
  _$jscoverage['auto.js'][54] = 0;
  _$jscoverage['auto.js'][55] = 0;
  _$jscoverage['auto.js'][59] = 0;
  _$jscoverage['auto.js'][62] = 0;
  _$jscoverage['auto.js'][65] = 0;
  _$jscoverage['auto.js'][67] = 0;
  _$jscoverage['auto.js'][75] = 0;
  _$jscoverage['auto.js'][79] = 0;
  _$jscoverage['auto.js'][80] = 0;
  _$jscoverage['auto.js'][81] = 0;
  _$jscoverage['auto.js'][84] = 0;
  _$jscoverage['auto.js'][98] = 0;
  _$jscoverage['auto.js'][101] = 0;
  _$jscoverage['auto.js'][103] = 0;
  _$jscoverage['auto.js'][104] = 0;
  _$jscoverage['auto.js'][107] = 0;
  _$jscoverage['auto.js'][108] = 0;
  _$jscoverage['auto.js'][110] = 0;
  _$jscoverage['auto.js'][111] = 0;
  _$jscoverage['auto.js'][114] = 0;
  _$jscoverage['auto.js'][117] = 0;
  _$jscoverage['auto.js'][118] = 0;
  _$jscoverage['auto.js'][121] = 0;
  _$jscoverage['auto.js'][124] = 0;
  _$jscoverage['auto.js'][127] = 0;
  _$jscoverage['auto.js'][132] = 0;
  _$jscoverage['auto.js'][135] = 0;
  _$jscoverage['auto.js'][139] = 0;
  _$jscoverage['auto.js'][147] = 0;
  _$jscoverage['auto.js'][150] = 0;
  _$jscoverage['auto.js'][151] = 0;
  _$jscoverage['auto.js'][155] = 0;
  _$jscoverage['auto.js'][157] = 0;
  _$jscoverage['auto.js'][159] = 0;
  _$jscoverage['auto.js'][162] = 0;
  _$jscoverage['auto.js'][164] = 0;
  _$jscoverage['auto.js'][169] = 0;
  _$jscoverage['auto.js'][171] = 0;
  _$jscoverage['auto.js'][172] = 0;
  _$jscoverage['auto.js'][173] = 0;
  _$jscoverage['auto.js'][188] = 0;
  _$jscoverage['auto.js'][189] = 0;
  _$jscoverage['auto.js'][193] = 0;
  _$jscoverage['auto.js'][194] = 0;
  _$jscoverage['auto.js'][198] = 0;
  _$jscoverage['auto.js'][199] = 0;
  _$jscoverage['auto.js'][202] = 0;
  _$jscoverage['auto.js'][205] = 0;
  _$jscoverage['auto.js'][208] = 0;
  _$jscoverage['auto.js'][226] = 0;
  _$jscoverage['auto.js'][227] = 0;
  _$jscoverage['auto.js'][245] = 0;
  _$jscoverage['auto.js'][246] = 0;
  _$jscoverage['auto.js'][249] = 0;
  _$jscoverage['auto.js'][266] = 0;
  _$jscoverage['auto.js'][267] = 0;
  _$jscoverage['auto.js'][285] = 0;
  _$jscoverage['auto.js'][286] = 0;
  _$jscoverage['auto.js'][289] = 0;
  _$jscoverage['auto.js'][290] = 0;
  _$jscoverage['auto.js'][293] = 0;
  _$jscoverage['auto.js'][309] = 0;
  _$jscoverage['auto.js'][327] = 0;
  _$jscoverage['auto.js'][328] = 0;
  _$jscoverage['auto.js'][342] = 0;
  _$jscoverage['auto.js'][353] = 0;
  _$jscoverage['auto.js'][355] = 0;
  _$jscoverage['auto.js'][357] = 0;
  _$jscoverage['auto.js'][358] = 0;
  _$jscoverage['auto.js'][361] = 0;
  _$jscoverage['auto.js'][362] = 0;
}
_$jscoverage['auto.js'][12]++;
function auto(tasks, callback, settings) {
  _$jscoverage['auto.js'][15]++;
  if (! (this instanceof auto)) {
    _$jscoverage['auto.js'][17]++;
    if (arguments.length === 0) {
      _$jscoverage['auto.js'][18]++;
      return ({});
    }
    _$jscoverage['auto.js'][21]++;
    if (arguments.length === 1) {
      _$jscoverage['auto.js'][22]++;
      return new auto(tasks);
    }
    _$jscoverage['auto.js'][25]++;
    if (arguments.length === 2) {
      _$jscoverage['auto.js'][26]++;
      return new auto(tasks, callback);
    }
    _$jscoverage['auto.js'][29]++;
    if (arguments.length === 3) {
      _$jscoverage['auto.js'][30]++;
      return new auto(tasks, callback, settings);
    }
  }
  _$jscoverage['auto.js'][36]++;
  var self = this;
  _$jscoverage['auto.js'][39]++;
  self.id = Math.random().toString(36).substring(7);
  _$jscoverage['auto.js'][40]++;
  self.tasks = tasks;
  _$jscoverage['auto.js'][41]++;
  self.callback = arguments[1] instanceof Function? arguments[1]: (function defaultCallback() {
});
  _$jscoverage['auto.js'][42]++;
  self.settings = auto.extend({}, auto.defaults, arguments.length === 3? settings: "function" !== typeof callback? callback: {});
  _$jscoverage['auto.js'][43]++;
  self.response = {};
  _$jscoverage['auto.js'][44]++;
  self.listeners = [];
  _$jscoverage['auto.js'][45]++;
  self._meta = {started: new Date().getTime(), timeout: new Date().getTime() + self.settings.timeout};
  _$jscoverage['auto.js'][46]++;
  self.error = null;
  _$jscoverage['auto.js'][47]++;
  self.keys = Object.keys(self.tasks);
  _$jscoverage['auto.js'][50]++;
  auto.emitter.mixin(self);
  _$jscoverage['auto.js'][53]++;
  if (! self.keys.length) {
    _$jscoverage['auto.js'][54]++;
    process.nextTick((function () {
  _$jscoverage['auto.js'][54]++;
  self.emit("complete", null, {});
}));
    _$jscoverage['auto.js'][55]++;
    return self.callback(null);
  }
  _$jscoverage['auto.js'][59]++;
  auto.active[self.id] = self;
  _$jscoverage['auto.js'][62]++;
  self.addListener(self.onComplete);
  _$jscoverage['auto.js'][65]++;
  self.each(self.keys, self.taskIterator);
  _$jscoverage['auto.js'][67]++;
  return self;
}
_$jscoverage['auto.js'][75]++;
Object.defineProperties(auto.prototype, {taskIterator: {value: (function taskIterator(key) {
  _$jscoverage['auto.js'][79]++;
  var self = this;
  _$jscoverage['auto.js'][80]++;
  var task = this.tasks[key] instanceof Function? [this.tasks[key]]: this.tasks[key];
  _$jscoverage['auto.js'][81]++;
  var requires = task.slice(0, Math.abs(task.length - 1)) || [];
  _$jscoverage['auto.js'][84]++;
  var context = {id: self.id, task: key, requires: requires, response: self.response, tasks: self.tasks};
  _$jscoverage['auto.js'][98]++;
  function taskCallback(error) {
    _$jscoverage['auto.js'][101]++;
    var args = Array.prototype.slice.call(arguments, 1);
    _$jscoverage['auto.js'][103]++;
    if (args.length <= 1) {
      _$jscoverage['auto.js'][104]++;
      args = args[0];
    }
    _$jscoverage['auto.js'][107]++;
    if (error && error instanceof Error) {
      _$jscoverage['auto.js'][108]++;
      var safeResults = {};
      _$jscoverage['auto.js'][110]++;
      auto.each(Object.keys(self.response), (function (rkey) {
  _$jscoverage['auto.js'][111]++;
  safeResults[rkey] = self.response[rkey];
}));
      _$jscoverage['auto.js'][114]++;
      safeResults[key] = args;
      _$jscoverage['auto.js'][117]++;
      self.emit("error", error, safeResults);
      _$jscoverage['auto.js'][118]++;
      self.emit("complete", error, safeResults);
      _$jscoverage['auto.js'][121]++;
      delete auto.active[this.id];
      _$jscoverage['auto.js'][124]++;
      self.callback(error, safeResults);
      _$jscoverage['auto.js'][127]++;
      self.callback = (function __fake_callback__() {
});
    }
    else {
      _$jscoverage['auto.js'][132]++;
      self.response[key] = args;
      _$jscoverage['auto.js'][135]++;
      self.setImmediate(self.stepComplete.bind(self), key, args);
    }
}
  _$jscoverage['auto.js'][139]++;
  ;
  _$jscoverage['auto.js'][147]++;
  function ready() {
    _$jscoverage['auto.js'][150]++;
    var magic = self.reduce(requires, (function (a, x) {
  _$jscoverage['auto.js'][151]++;
  return (a && self.response.hasOwnProperty(x));
}), true) && ! self.response.hasOwnProperty(key);
    _$jscoverage['auto.js'][155]++;
    self.emit("ready", key, magic);
    _$jscoverage['auto.js'][157]++;
    return magic;
}
  _$jscoverage['auto.js'][159]++;
  ;
  _$jscoverage['auto.js'][162]++;
  if (ready()) {
    _$jscoverage['auto.js'][164]++;
    task[task.length - 1].bind(context)(taskCallback, self.response, self);
  }
  else {
    _$jscoverage['auto.js'][169]++;
    self.addListener((function listener() {
  _$jscoverage['auto.js'][171]++;
  if (ready()) {
    _$jscoverage['auto.js'][172]++;
    self.removeListener(listener, key);
    _$jscoverage['auto.js'][173]++;
    task[task.length - 1].bind(context)(taskCallback, self.response);
  }
}), key);
  }
}), writable: false, enumerable: false, configurable: true}, onComplete: {value: (function onComplete() {
  _$jscoverage['auto.js'][188]++;
  if (Object.keys(this.response).length !== this.keys.length) {
    _$jscoverage['auto.js'][189]++;
    return;
  }
  _$jscoverage['auto.js'][193]++;
  if (this.callback.name === "Placeholder") {
    _$jscoverage['auto.js'][194]++;
    return;
  }
  _$jscoverage['auto.js'][198]++;
  this.emit("complete", null, this.response);
  _$jscoverage['auto.js'][199]++;
  this.emit("success", this.response);
  _$jscoverage['auto.js'][202]++;
  this.callback(null, this.response);
  _$jscoverage['auto.js'][205]++;
  delete auto.active[this.id];
  _$jscoverage['auto.js'][208]++;
  this.callback = (function Placeholder() {
});
}), writable: false, enumerable: false, configurable: true}, removeListener: {value: (function removeListener(fn, k) {
  _$jscoverage['auto.js'][226]++;
  for (var i = 0; i < this.listeners.length; i += 1) {
    _$jscoverage['auto.js'][227]++;
    if (this.listeners[i] === fn) {
      _$jscoverage['auto.js'][227]++;
      this.listeners.splice(i, 1);
      _$jscoverage['auto.js'][227]++;
      return;
    }
}
}), writable: false, enumerable: false, configurable: true}, setImmediate: {value: (function setImmediate(fn) {
  _$jscoverage['auto.js'][245]++;
  if (process && process.nextTick) {
    _$jscoverage['auto.js'][246]++;
    return process.nextTick(fn);
  }
  _$jscoverage['auto.js'][249]++;
  setTimeout((function () {
  _$jscoverage['auto.js'][249]++;
  fn();
}), 0);
}), writable: false, enumerable: false, configurable: true}, each: {value: (function each(arr, iterator) {
  _$jscoverage['auto.js'][266]++;
  if (arr.forEach) {
    _$jscoverage['auto.js'][266]++;
    return arr.forEach(iterator.bind(this));
  }
  _$jscoverage['auto.js'][267]++;
  for (var i = 0; i < arr.length; i += 1) {
    _$jscoverage['auto.js'][267]++;
    iterator.bind(this)(arr[i], i, arr);
}
}), writable: false, enumerable: false, configurable: true}, reduce: {value: (function reduce(arr, iterator, memo) {
  _$jscoverage['auto.js'][285]++;
  if (arr.reduce) {
    _$jscoverage['auto.js'][286]++;
    return arr.reduce(iterator, memo);
  }
  _$jscoverage['auto.js'][289]++;
  this.each(arr, (function (x, i, a) {
  _$jscoverage['auto.js'][290]++;
  memo = iterator(memo, x, i, a);
}));
  _$jscoverage['auto.js'][293]++;
  return memo;
}), writable: false, enumerable: false, configurable: true}, addListener: {value: (function addListener(fn, k) {
  _$jscoverage['auto.js'][309]++;
  this.listeners.unshift(fn.bind(this));
}), writable: false, enumerable: false, configurable: true}, stepComplete: {value: (function stepComplete(k, args) {
  _$jscoverage['auto.js'][327]++;
  this.each(this.listeners.slice(0), (function (fn) {
  _$jscoverage['auto.js'][328]++;
  fn();
}));
}), writable: false, enumerable: false, configurable: true}});
_$jscoverage['auto.js'][342]++;
Object.defineProperties(module.exports = auto, {middleware: {value: (function middleware(tasks, callback, settings) {
  _$jscoverage['auto.js'][353]++;
  return (function middleware(req, res, next) {
  _$jscoverage['auto.js'][355]++;
  var instance = auto(tasks, callback, settings);
  _$jscoverage['auto.js'][357]++;
  instance.on("success", (function complete(report) {
  _$jscoverage['auto.js'][358]++;
  res.send(report);
}));
  _$jscoverage['auto.js'][361]++;
  instance.on("error", (function error(error, report) {
  _$jscoverage['auto.js'][362]++;
  next(error);
}));
});
}), enumerable: true, writable: true, configurable: false}, defaults: {value: {timeout: 5000}, enumerable: true, writable: true, configurable: false}, emitter: {value: require("object-emitter"), writable: true, enumerable: false}, extend: {value: require("extend"), enumerable: false, writable: true}, active: {value: {}, enumerable: true, configurable: false, writable: true}});
_$jscoverage['auto.js'].source = ["/**"," * auto Module"," *"," * -"," *"," * @module auto"," * @constructor"," * @author potanin@UD"," * @date 8/5/13"," * @type {Object}"," */","function auto( tasks, callback, settings ) {","","  // Ensure always using new instance of auto","  if( !( this instanceof auto ) ) {","","    if( arguments.length === 0 ) {","      return {};","    }","","    if( arguments.length === 1 ) {","      return new auto( tasks );","    }","","    if( arguments.length === 2 ) {","      return new auto( tasks, callback );","    }","","    if( arguments.length === 3 ) {","      return new auto( tasks, callback, settings );","    }","","  }","","  // Set private properties","  var self        = this;","","  // Set instance properties","  self.id         = Math.random().toString( 36 ).substring( 7 );","  self.tasks      = tasks;","  self.callback   = arguments[1] instanceof Function ? arguments[1] : function defaultCallback() {};","  self.settings   = auto.extend( {}, auto.defaults, arguments.length === 3 ? settings : 'function' !== typeof callback ? callback : {} );","  self.response   = {};","  self.listeners  = [];","  self._meta      = { started: new Date().getTime(), timeout: new Date().getTime() + self.settings.timeout };","  self.error      = null;","  self.keys       = Object.keys( self.tasks );","","  // Extend this with Event Emitter","  auto.emitter.mixin( self );","","  // Ensure there are tasks","  if( !self.keys.length ) {","    process.nextTick( function() { self.emit( 'complete', null, {} ); });","    return self.callback( null );","  }","","  // Add to running queue","  auto.active[ self.id ] = self;","","  // Add final listener","  self.addListener( self.onComplete );","","  // Iterate through keys","  self.each( self.keys, self.taskIterator );","","  return self;","","}","","/**"," * Instance Properties."," *"," */","Object.defineProperties( auto.prototype, {","  taskIterator: {","    value: function taskIterator( key ) {","","      var self      = this;","      var task      = this.tasks[key] instanceof Function ? [ this.tasks[key] ] : this.tasks[key];","      var requires  = task.slice( 0, Math.abs( task.length - 1 )) || [];","","      // Task Step Context","      var context = {","        id: self.id,","        task: key,","        requires: requires,","        response: self.response,","        tasks: self.tasks","      }","","      /**","       * Task Callback","       *","       * @todo Migrate into prototype.","       * @param error","       */","      function taskCallback( error ) {","","        // Get response arguments","        var args = Array.prototype.slice.call( arguments, 1) ;","","        if (args.length &lt;= 1) {","          args = args[0];","        }","","        if( error &amp;&amp; error instanceof Error ) {","          var safeResults = {};","","          auto.each( Object.keys( self.response ), function( rkey ) {","            safeResults[rkey] = self.response[rkey];","          });","","          safeResults[key] = args;","","          // Emit task evnet and complete event","          self.emit( 'error', error, safeResults );","          self.emit( 'complete', error, safeResults );","","          // Remove from active queue","          delete auto.active[ this.id ];","","          // Trigger callback","          self.callback( error, safeResults );","","          // stop subsequent errors hitting callback multiple times","          self.callback = function __fake_callback__() {};","","        } else {","","          // Save task response to general response","          self.response[key] = args;","","          // process.nextTick( )","          self.setImmediate( self.stepComplete.bind( self ), key, args );","","        }","","      };","","      /**","       * Ready to Process a Step","       *","       * @todo Migrate into prototype.","       * @returns {*|boolean}","       */","      function ready() {","","        // Identify Dependacncies with some form of magic","        var magic = self.reduce( requires, function( a, x ) {","          return ( a &amp;&amp; self.response.hasOwnProperty( x ));","        }, true ) &amp;&amp; !self.response.hasOwnProperty( key );","","        // Step Ready","        self.emit( 'ready', key, magic );","","        return magic;","","      };","","      // Trigger Method","      if( ready() ) {","","        task[ task.length - 1 ].bind( context )( taskCallback, self.response, self );","","      } else {","","        // Create a listener to be checked later","        self.addListener( function listener() {","","          if( ready() ) {","            self.removeListener( listener, key );","            task[ task.length - 1 ].bind( context )( taskCallback, self.response );","          }","","        }, key );","","      }","","    },","    writable: false,","    enumerable: false,","    configurable: true","  },","  onComplete: {","    value: function onComplete() {","","      if( Object.keys( this.response ).length !== this.keys.length ) {","        return;","      }","","      // Will fire multiple times if not checked","      if( this.callback.name === 'Placeholder' ) {","        return;","      }","","      // All steps in task are complete","      this.emit( 'complete', null, this.response );","      this.emit( 'success', this.response );","","      // Call the primary callback","      this.callback( null, this.response );","","      // Remove from active queue","      delete auto.active[ this.id ];","","      // Unset Callback","      this.callback = function Placeholder() {};","","    },","    writable: false,","    enumerable: false,","    configurable: true","  },","  removeListener: {","    /**","     * Remove Listener from Queue","     *","     * @method removeListener","     * @param fn","     * @param k","     */","    value: function removeListener( fn, k ) {","      // self.emit( 'removeListener', k );","","      for( var i = 0; i &lt; this.listeners.length; i += 1 ) {","        if( this.listeners[i] === fn ) { this.listeners.splice(i, 1); return; }","      }","","    },","    writable: false,","    enumerable: false,","    configurable: true","  },","  setImmediate: {","    /**","     * Run Method on next tick","     *","     * @method setImmediate","     * @param fn","     * @returns {*}","     */","    value: function setImmediate( fn ) {","","      if( process &amp;&amp; process.nextTick ) {","        return process.nextTick( fn );","      }","","      setTimeout( function() { fn() }, 0 )","","    },","    writable: false,","    enumerable: false,","    configurable: true","  },","  each: {","    /**","     * Array Iterator","     *","     * @method each","     * @param arr","     * @param iterator","     * @returns {*}","     */","    value: function each( arr, iterator ) {","      if (arr.forEach) { return arr.forEach( iterator.bind( this ) ); }","      for (var i = 0; i &lt; arr.length; i += 1) { iterator.bind( this )(arr[i], i, arr); }","    },","    writable: false,","    enumerable: false,","    configurable: true","  },","  reduce: {","    /**","     * Array Reduce","     *","     * @method reduce","     * @param arr","     * @param iterator","     * @param memo","     * @returns {*}","     */","    value: function reduce( arr, iterator, memo ) {","","      if( arr.reduce) {","        return arr.reduce( iterator , memo);","      }","","      this.each( arr, function (x, i, a) {","        memo = iterator(memo, x, i, a);","      });","","      return memo;","    },","    writable: false,","    enumerable: false,","    configurable: true","  },","  addListener: {","    /**","     * Add Listener to Queue in context","     *","     * @method addListener","     * @param fn","     * @param k","     */","    value: function addListener( fn , k) {","      // self.emit( 'addListener', k );","      this.listeners.unshift( fn.bind( this ) );","    },","    writable: false,","    enumerable: false,","    configurable: true","  },","  stepComplete: {","    /**","     * Single Step Complete","     *","     * @method stepComplete","     * @param k","     * @param args","     */","    value: function stepComplete( k, args ) {","      // self.emit( 'step_complete', k, args );","","      // Get just the methods from each step","      this.each( this.listeners.slice(0), function( fn ) {","        fn();","      });","","    },","    writable: false,","    enumerable: false,","    configurable: true","  }","});","","/**"," * Constructor Properties"," *"," */","Object.defineProperties( module.exports = auto, {","  middleware: {","    /**","     *","     * @param tasks","     * @param callback","     * @param settings","     * @returns {Function}","     */","    value: function middleware( tasks, callback, settings ) {","","      return function middleware( req, res, next ) {","","        var instance = auto( tasks, callback, settings );","","        instance.on( 'success', function complete( report ) {","          res.send( report );","        });","","        instance.on( 'error', function error( error, report ) {","          next( error );","        });","","      }","","    },","    enumerable: true,","    writable: true,","    configurable: false","  },","  defaults: {","    value: {","      timeout: 5000","    },","    enumerable: true,","    writable: true,","    configurable: false","  },","  emitter: {","    value: require( 'object-emitter' ),","    writable: true,","    enumerable: false","  },","  extend: {","    value: require( 'extend' ),","    enumerable: false,","    writable: true","  },","  active: {","    value: {},","    enumerable: true,","    configurable: false,","    writable: true","  },","});"];
